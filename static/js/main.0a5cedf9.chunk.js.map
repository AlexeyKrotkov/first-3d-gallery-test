{"version":3,"sources":["textures/wall-white.jpg","elements/wall.ts","utils/texture-loader.js","elements/picture.ts","elements/simple-light.ts","api/fetchable.ts","creators/get-all-pictures.ts","api/fetch-user-flickr-photos.ts","api/constants.ts","utils/get-value-by-limit.js","components/app.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","Wall","Object","classCallCheck","this","texture","geometry","material","mesh","THREE","load","WallImg","wrapS","wrapT","repeat","set","map","receiveShadow","textureLoader","Picture","_ref2","url","width","height","_ref","getTrueProportions","castShadow","SimpleLight","x","y","light","shadow","camera","near","far","fetchable","axios","getAllPictures","Promise","resolve","get","params","method","api_key","user_id","per_page","page","format","nojsoncallback","then","response","photoIds","data","photos","photo","ph","id","all","photoId","photo_id","fetchPhotoSizedByPhotoId","resp","neededSizes","res","sizes","size","photoSizes","find","phS","label","getValueByLimit","value","min","max","App","_React$Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","mouseX","mouseY","scene","renderer","mainLight","mount","well","frameId","onResize","window","innerWidth","innerHeight","aspect","updateProjectionMatrix","setSize","start","requestAnimationFrame","animate","stop","cancelAnimationFrame","onCameraMove","renderScene","_this$camera$position","position","z","lightZ","_this$state","_this$mount","h","offsetHeight","nextCameraX","offsetWidth","nextCameraY","totalWidth","reduce","acc","next","render","onMouseMove","e","clientX","clientY","setState","inherits","createClass","key","_this2","widthScreen","heightScreen","lookAt","antialias","setClearColor","shadowMap","enabled","type","appendChild","domElement","add","photoSizedInfo","forEach","photoSizeInfo","index","source","picture","addEventListener","removeChild","_this3","react","ref","React","ReactDOM","react_default","a","createElement","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.0a5cedf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wall-white.e7d5b8a3.jpg\";","import * as THREE from 'three';\r\nimport * as WallImg from '../textures/wall-white.jpg';\r\n\r\nexport class Wall {\r\n    texture: THREE.Texture;\r\n    geometry: THREE.PlaneGeometry;\r\n    material: THREE.MeshBasicMaterial;\r\n    mesh: THREE.Mesh;\r\n    constructor() {\r\n        const texture = new THREE.TextureLoader().load(WallImg);\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        texture.wrapT = THREE.RepeatWrapping;\r\n        texture.repeat.set( 200, 20 );\r\n        this.geometry = new THREE.PlaneGeometry(500, 50, 1, 1);\r\n        this.material = new THREE.MeshPhongMaterial({\r\n            map: texture,\r\n        });\r\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n        this.mesh.receiveShadow = true;\r\n    }\r\n}\r\n","import * as THREE from 'three';\n\nexport const textureLoader = new THREE.TextureLoader();\n","import * as THREE from 'three';\r\nimport { textureLoader } from '../utils/texture-loader';\r\n\r\ninterface PictureProps {\r\n    url: string;\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nexport const getTrueProportions = ({ width, height }: any) => {\r\n    if (width > height) return height / width;\r\n    return width / height;\r\n};\r\n\r\n\r\nexport class Picture {\r\n    texture: THREE.Texture;\r\n    geometry: THREE.PlaneGeometry;\r\n    material: THREE.MeshPhongMaterial;\r\n    mesh: THREE.Mesh;\r\n    constructor({ url, width, height }: PictureProps) {\r\n        const texture = textureLoader.load(url);\r\n        this.geometry = new THREE.BoxGeometry(\r\n            width || 2,\r\n            height || 2 * getTrueProportions({ height, width }),\r\n            1,\r\n        );\r\n        this.material = new THREE.MeshPhongMaterial({\r\n            map: texture,\r\n        });\r\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n        this.mesh.receiveShadow = true;\r\n        this.mesh.castShadow = true;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class SimpleLight {\r\n    light: THREE.PointLight;\r\n    constructor({x, y}: any) {\r\n        this.light = new THREE.PointLight( 0xffffff, 1.7, 12 );\r\n        this.light.castShadow = true;\r\n        this.light.shadow.camera.near = 0.1;\r\n        this.light.shadow.camera.far = 25;\r\n    }\r\n}\r\n","import axios from 'axios';\n\nexport const fetchable = axios;\n","import {\r\n    fetchPhotoSizedByPhotoId,\r\n    fetchUserFlickrPhotos,\r\n} from '../api/fetch-user-flickr-photos';\r\n\r\nexport const getAllPictures = (): Promise<any> =>\r\n    new Promise(resolve => {\r\n        fetchUserFlickrPhotos().then((response: any) => {\r\n            const {\r\n                data: {\r\n                    photos: { photo },\r\n                },\r\n            } = response;\r\n            const photoIds = photo.map((ph: any) => ph.id);\r\n            return Promise.all(\r\n                photoIds.map((photoId: string) =>\r\n                    fetchPhotoSizedByPhotoId(photoId),\r\n                ),\r\n            ).then(resp => {\r\n                const allPhotosSizes = resp.map(\r\n                    (res: any) => res.data.sizes.size,\r\n                );\r\n                const neededSizes = allPhotosSizes.map(photoSizes => {\r\n                    const found = photoSizes.find(\r\n                        (phS: any) => phS.label === 'Large',\r\n                    );\r\n                    return found;\r\n                });\r\n                resolve(neededSizes);\r\n            });\r\n        });\r\n    });\r\n\r\n","import { fetchable } from './fetchable';\r\nimport { flickrApiKey, flickrRestUrl, flickrUserId } from './constants';\r\n\r\nexport const fetchUserFlickrPhotos = () =>\r\n    fetchable.get(flickrRestUrl, {\r\n        params: {\r\n            method: 'flickr.photos.search',\r\n            api_key: flickrApiKey,\r\n            user_id: flickrUserId,\r\n            per_page: 50,\r\n            page: 1,\r\n            format: 'json',\r\n            nojsoncallback: 1\r\n        },\r\n    });\r\n\r\nexport const fetchPhotoSizedByPhotoId = (photoId: string) =>\r\n    fetchable.get(flickrRestUrl, {\r\n        params: {\r\n            method: 'flickr.photos.getSizes',\r\n            api_key: flickrApiKey,\r\n            photo_id: photoId,\r\n            format: 'json',\r\n            nojsoncallback: 1\r\n        },\r\n    });\r\n","export const flickrRestUrl = 'https://www.flickr.com/services/rest';\nexport const flickrApiKey = 'eb8103648d681bf445bc1a9e4d8d5e07';\nexport const flickrUserId = '100742010@N06';\n","export const getValueByLimit = ({ value, min, max }) => {\r\n    if (value < min) return min;\r\n    return value > max ? max : value;\r\n};\r\n","import * as React from 'react';\r\nimport * as THREE from 'three';\r\nimport { Wall } from '../elements/wall';\r\nimport { Picture } from '../elements/picture';\r\nimport { SimpleLight } from '../elements/simple-light';\r\nimport { getAllPictures } from '../creators/get-all-pictures';\r\nimport { mockPhotoUrls } from '../api/mocks';\r\nimport { getValueByLimit } from '../utils/get-value-by-limit';\r\n\r\nexport class App extends React.Component {\r\n    state = {\r\n        mouseX: 0,\r\n        mouseY: 0,\r\n        photos: [],\r\n    };\r\n    scene: THREE.Scene;\r\n    camera: THREE.PerspectiveCamera;\r\n    renderer: THREE.WebGLRenderer;\r\n    mainLight: SimpleLight;\r\n    mount: any;\r\n    well: THREE.Mesh;\r\n    frameId: any;\r\n\r\n    onResize = () => {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            mouseX: window.innerWidth / 2,\r\n            mouseY: window.innerHeight / 2,\r\n        });\r\n        const widthScreen = window.innerWidth;\r\n        const heightScreen = window.innerHeight;\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            widthScreen / heightScreen,\r\n            0.1,\r\n            1000,\r\n        );\r\n        this.camera.lookAt(new THREE.Vector3(1.4, 0.3, -2));\r\n        this.camera.position.z = 4;\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        this.renderer.setClearColor('#000000');\r\n        this.renderer.setSize(widthScreen, heightScreen);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.BasicShadowMap;\r\n        this.mount.appendChild(this.renderer.domElement);\r\n        // elements\r\n        this.well = new Wall().mesh;\r\n        this.start();\r\n        this.scene.add(this.well);\r\n        getAllPictures().then((photoSizedInfo: any) => {\r\n            photoSizedInfo.forEach((photoSizeInfo: any, index: number) => {\r\n                const { source, width, height } = photoSizeInfo;\r\n                const picture = new Picture({\r\n                    url: source,\r\n                    width: width / 300,\r\n                    height: height / 300,\r\n                });\r\n                picture.mesh.position.set(index * 3.8, 0, 0);\r\n                this.setState({\r\n                    photos: photoSizedInfo,\r\n                });\r\n                this.scene.add(picture.mesh);\r\n            });\r\n        });\r\n        // mockPhotoUrls.forEach((url: string, index: number) => {\r\n        //     const picture = new Picture({ url });\r\n        //     picture.mesh.position.set(index * 1.5, 0, 0);\r\n        //     this.scene.add(picture.mesh);\r\n        // });\r\n        this.mainLight = new SimpleLight({ x: 0, y: 0 });\r\n        this.mainLight.light.position.set( 0, 0, 2 );\r\n        this.scene.add(this.mainLight.light);\r\n        window.addEventListener('resize', this.onResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n        // @ts-ignore\r\n        this.mount.removeChild(this.renderer.domElement);\r\n    }\r\n\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate);\r\n        }\r\n    };\r\n\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId);\r\n    };\r\n\r\n    animate = () => {\r\n        this.onCameraMove();\r\n        this.renderScene();\r\n        this.frameId = window.requestAnimationFrame(this.animate);\r\n    };\r\n\r\n    onCameraMove = () => {\r\n        const {\r\n            position: { x, y, z },\r\n        } = this.camera;\r\n        const {\r\n            position: { z: lightZ },\r\n        } = this.mainLight.light;\r\n        const { mouseX, mouseY, photos } = this.state;\r\n        if (mouseX !== null && mouseY !== null) {\r\n            const { offsetHeight: h, offsetWidth: w } = this.mount;\r\n            const cH = h / 2;\r\n            const cW = w / 2;\r\n            const factorSpeedX = 1;\r\n            const factorSpeedY = 1;\r\n            const nextCameraX = x - ((cW - mouseX) / 10000) * factorSpeedX;\r\n            const nextCameraY = y + ((cH - mouseY) / 10000) * factorSpeedY;\r\n            const totalWidth = photos.reduce((acc, next: any) => {\r\n                const result = acc + next.width;\r\n                return result;\r\n            }, 0);\r\n            this.camera.position.set(\r\n                getValueByLimit({\r\n                    value: nextCameraX,\r\n                    min: -5,\r\n                    max: totalWidth,\r\n                }),\r\n                getValueByLimit({ value: nextCameraY, min: -3, max: 3 }),\r\n                z,\r\n            );\r\n            this.mainLight.light.position.set(\r\n                nextCameraX - 1,\r\n                nextCameraY - 1,\r\n                lightZ,\r\n            );\r\n        }\r\n    };\r\n\r\n    renderScene = () => {\r\n        this.renderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    onMouseMove = (e: any) => {\r\n        const { clientX, clientY } = e;\r\n        this.setState({\r\n            mouseX: clientX,\r\n            mouseY: clientY,\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <div\r\n                onMouseMove={this.onMouseMove}\r\n                ref={mount => {\r\n                    this.mount = mount;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components/app';\r\nimport './styles/global.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}