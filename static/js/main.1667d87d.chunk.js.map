{"version":3,"sources":["textures/wall-white.jpg","elements/wall.ts","utils/texture-loader.js","elements/picture.ts","elements/simple-light.ts","api/fetchable.ts","creators/get-all-pictures.ts","api/fetch-user-flickr-photos.ts","api/constants.ts","utils/get-value-by-limit.js","components/app.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","Wall","Object","classCallCheck","this","texture","geometry","material","mesh","THREE","load","WallImg","wrapS","wrapT","repeat","set","map","receiveShadow","textureLoader","Picture","_ref","url","width","height","castShadow","SimpleLight","x","y","light","shadow","camera","near","far","fetchable","axios","getAllPictures","Promise","resolve","get","params","method","api_key","user_id","per_page","page","format","nojsoncallback","then","response","photoIds","data","photos","photo","ph","id","all","photoId","photo_id","fetchPhotoSizedByPhotoId","resp","neededSizes","res","sizes","size","photoSizes","find","phS","label","getValueByLimit","value","min","max","App","_React$Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","mouseX","mouseY","totalShift","scene","renderer","mainLight","mount","well","frameId","onResize","window","innerWidth","innerHeight","aspect","updateProjectionMatrix","setSize","start","requestAnimationFrame","animate","stop","cancelAnimationFrame","onCameraMove","renderScene","_this$camera$position","position","z","lightZ","_this$state","_this$mount","h","offsetHeight","nextCameraX","offsetWidth","nextCameraY","render","onMouseMove","e","clientX","clientY","setState","inherits","createClass","key","_this2","widthScreen","heightScreen","lookAt","antialias","setClearColor","shadowMap","enabled","type","appendChild","domElement","add","photoSizedInfo","shift","forEach","photoSizeInfo","console","log","source","picture","addEventListener","removeChild","_this3","react","ref","React","ReactDOM","react_default","a","createElement","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.1667d87d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wall-white.e7d5b8a3.jpg\";","import * as THREE from 'three';\r\nimport * as WallImg from '../textures/wall-white.jpg';\r\n\r\nexport class Wall {\r\n    texture: THREE.Texture;\r\n    geometry: THREE.PlaneGeometry;\r\n    material: THREE.MeshBasicMaterial;\r\n    mesh: THREE.Mesh;\r\n    constructor() {\r\n        const texture = new THREE.TextureLoader().load(WallImg);\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        texture.wrapT = THREE.RepeatWrapping;\r\n        texture.repeat.set( 200, 20 );\r\n        this.geometry = new THREE.PlaneGeometry(500, 50, 1, 1);\r\n        this.material = new THREE.MeshPhongMaterial({\r\n            map: texture,\r\n        });\r\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n        this.mesh.receiveShadow = true;\r\n    }\r\n}\r\n","import * as THREE from 'three';\n\nexport const textureLoader = new THREE.TextureLoader();\n","import * as THREE from 'three';\nimport { textureLoader } from '../utils/texture-loader';\n\ninterface PictureProps {\n    url: string;\n    width: number;\n    height: number;\n}\n\nexport class Picture {\n    texture: THREE.Texture;\n    geometry: THREE.PlaneGeometry;\n    material: THREE.MeshPhongMaterial;\n    mesh: THREE.Mesh;\n    constructor({ url, width, height }: PictureProps) {\n        const texture = textureLoader.load(url);\n        this.geometry = new THREE.BoxGeometry(\n            width,\n            height,\n            1,\n        );\n        this.material = new THREE.MeshPhongMaterial({\n            map: texture,\n        });\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.mesh.receiveShadow = true;\n        this.mesh.castShadow = true;\n    }\n}\n","import * as THREE from 'three';\r\n\r\nexport class SimpleLight {\r\n    light: THREE.PointLight;\r\n    constructor({x, y}: any) {\r\n        this.light = new THREE.PointLight( 0xffffff, 1.7, 12 );\r\n        this.light.castShadow = true;\r\n        this.light.shadow.camera.near = 0.1;\r\n        this.light.shadow.camera.far = 25;\r\n    }\r\n}\r\n","import axios from 'axios';\n\nexport const fetchable = axios;\n","import {\r\n    fetchPhotoSizedByPhotoId,\r\n    fetchUserFlickrPhotos,\r\n} from '../api/fetch-user-flickr-photos';\r\n\r\nexport const getAllPictures = (): Promise<any> =>\r\n    new Promise(resolve => {\r\n        fetchUserFlickrPhotos().then((response: any) => {\r\n            const {\r\n                data: {\r\n                    photos: { photo },\r\n                },\r\n            } = response;\r\n            const photoIds = photo.map((ph: any) => ph.id);\r\n            return Promise.all(\r\n                photoIds.map((photoId: string) =>\r\n                    fetchPhotoSizedByPhotoId(photoId),\r\n                ),\r\n            ).then(resp => {\r\n                const allPhotosSizes = resp.map(\r\n                    (res: any) => res.data.sizes.size,\r\n                );\r\n                const neededSizes = allPhotosSizes.map(photoSizes => {\r\n                    const found = photoSizes.find(\r\n                        (phS: any) => phS.label === 'Large',\r\n                    );\r\n                    return found;\r\n                });\r\n                resolve(neededSizes);\r\n            });\r\n        });\r\n    });\r\n\r\n","import { fetchable } from './fetchable';\r\nimport { flickrApiKey, flickrRestUrl, flickrUserId } from './constants';\r\n\r\nexport const fetchUserFlickrPhotos = () =>\r\n    fetchable.get(flickrRestUrl, {\r\n        params: {\r\n            method: 'flickr.photos.search',\r\n            api_key: flickrApiKey,\r\n            user_id: flickrUserId,\r\n            per_page: 50,\r\n            page: 1,\r\n            format: 'json',\r\n            nojsoncallback: 1\r\n        },\r\n    });\r\n\r\nexport const fetchPhotoSizedByPhotoId = (photoId: string) =>\r\n    fetchable.get(flickrRestUrl, {\r\n        params: {\r\n            method: 'flickr.photos.getSizes',\r\n            api_key: flickrApiKey,\r\n            photo_id: photoId,\r\n            format: 'json',\r\n            nojsoncallback: 1\r\n        },\r\n    });\r\n","export const flickrRestUrl = 'https://www.flickr.com/services/rest';\nexport const flickrApiKey = 'eb8103648d681bf445bc1a9e4d8d5e07';\nexport const flickrUserId = '100742010@N06';\n","export const getValueByLimit = ({ value, min, max }) => {\r\n    if (value < min) return min;\r\n    return value > max ? max : value;\r\n};\r\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { Wall } from '../elements/wall';\nimport { Picture } from '../elements/picture';\nimport { SimpleLight } from '../elements/simple-light';\nimport { getAllPictures } from '../creators/get-all-pictures';\nimport { mockPhotoUrls } from '../api/mocks';\nimport { getValueByLimit } from '../utils/get-value-by-limit';\n\nexport class App extends React.Component {\n    state = {\n        mouseX: 0,\n        mouseY: 0,\n        totalShift: 0,\n    };\n    scene: THREE.Scene;\n    camera: THREE.PerspectiveCamera;\n    renderer: THREE.WebGLRenderer;\n    mainLight: SimpleLight;\n    mount: any;\n    well: THREE.Mesh;\n    frameId: any;\n\n    onResize = () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n    };\n\n    componentDidMount() {\n        this.setState({\n            mouseX: window.innerWidth / 2,\n            mouseY: window.innerHeight / 2,\n        });\n        const widthScreen = window.innerWidth;\n        const heightScreen = window.innerHeight;\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75,\n            widthScreen / heightScreen,\n            0.1,\n            1000,\n        );\n        this.camera.lookAt(new THREE.Vector3(1.4, 0.3, -2));\n        this.camera.position.z = 4.5;\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setClearColor('#000000');\n        this.renderer.setSize(widthScreen, heightScreen);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.BasicShadowMap;\n        this.mount.appendChild(this.renderer.domElement);\n        // elements\n        this.well = new Wall().mesh;\n        this.start();\n        this.scene.add(this.well);\n        getAllPictures().then((photoSizedInfo: any) => {\n            let shift = 0;\n            photoSizedInfo.forEach((photoSizeInfo: any) => {\n                console.log(photoSizeInfo);\n                const { source, width, height } = photoSizeInfo;\n                const imageWidth = width * (width > height ? width / height : 1) / 300;\n                const imageHeight =\n                    height * (width <= height ? width / height : 1) / 300;\n                const picture = new Picture({\n                    url: source,\n                    width: imageWidth,\n                    height: imageHeight,\n                });\n                picture.mesh.position.set(shift, 0, 0);\n                shift += 3.8;\n                this.setState({\n                    totalShift: shift,\n                });\n                this.scene.add(picture.mesh);\n            });\n        });\n        // mockPhotoUrls.forEach((url: string, index: number) => {\n        //     const picture = new Picture({ url });\n        //     picture.mesh.position.set(index * 1.5, 0, 0);\n        //     this.scene.add(picture.mesh);\n        // });\n        this.mainLight = new SimpleLight({ x: 0, y: 0 });\n        this.mainLight.light.position.set(0, 0, 2);\n        this.scene.add(this.mainLight.light);\n        window.addEventListener('resize', this.onResize);\n    }\n\n    componentWillUnmount() {\n        this.stop();\n        // @ts-ignore\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    start = () => {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate);\n        }\n    };\n\n    stop = () => {\n        cancelAnimationFrame(this.frameId);\n    };\n\n    animate = () => {\n        this.onCameraMove();\n        this.renderScene();\n        this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    onCameraMove = () => {\n        const {\n            position: { x, y, z },\n        } = this.camera;\n        const {\n            position: { z: lightZ },\n        } = this.mainLight.light;\n        const { mouseX, mouseY, totalShift } = this.state;\n        if (mouseX !== null && mouseY !== null) {\n            const { offsetHeight: h, offsetWidth: w } = this.mount;\n            const cH = h / 2;\n            const cW = w / 2;\n            const factorSpeedX = 1;\n            const factorSpeedY = 1;\n            const nextCameraX = x - ((cW - mouseX) / 10000) * factorSpeedX;\n            const nextCameraY = y + ((cH - mouseY) / 10000) * factorSpeedY;\n            this.camera.position.set(\n                getValueByLimit({\n                    value: nextCameraX,\n                    min: -5,\n                    max: totalShift,\n                }),\n                getValueByLimit({ value: nextCameraY, min: -3, max: 3 }),\n                z,\n            );\n            this.mainLight.light.position.set(\n                nextCameraX - 1,\n                nextCameraY - 1,\n                lightZ,\n            );\n        }\n    };\n\n    renderScene = () => {\n        this.renderer.render(this.scene, this.camera);\n    };\n\n    onMouseMove = (e: any) => {\n        const { clientX, clientY } = e;\n        this.setState({\n            mouseX: clientX,\n            mouseY: clientY,\n        });\n    };\n    render() {\n        return (\n            <div\n                onMouseMove={this.onMouseMove}\n                ref={mount => {\n                    this.mount = mount;\n                }}\n            />\n        );\n    }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components/app';\r\nimport './styles/global.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}